{
	"info": {
		"_postman_id": "mcp-pagination-cursor-demo",
		"name": "MCP Pagination (Cursor-Based)",
		"description": "A collection to demonstrate spec-compliant, cursor-based pagination.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Initialize Session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Attempt to parse the response, but handle cases where it's not JSON",
							"try {",
							"    const responseBody = pm.response.json();",
							"    console.log(\"Response Body:\", JSON.stringify(responseBody, null, 2));",
							"    if (responseBody.error) {",
							"        console.error(\"Server returned an error:\", JSON.stringify(responseBody.error, null, 2));",
							"    }",
							"} catch (e) {",
							"    console.error(\"Could not parse response body as JSON. Raw response:\", pm.response.text());",
							"}",
							"",
							"// The session ID is in the response headers, not the body",
							"const sessionId = pm.response.headers.get('mcp-session-id');",
							"",
							"if (sessionId) {",
							"    pm.collectionVariables.set(\"MCP_SESSION_ID\", sessionId);",
							"    console.log(`MCP Session ID set to: ${sessionId}`);",
							"} else {",
							"    console.error(\"CRITICAL: 'mcp-session-id' header not found in response.\");",
							"}",
							"",
							"// Clear any old cursor to start fresh",
							"pm.collectionVariables.set(\"nextCursor\", \"\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-06-18\",\n        \"clientInfo\": {\n            \"name\": \"postman-pagination-test\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {}\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/mcp/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"mcp",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Send Initialized Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Initialized notification accepted\", function () {",
							"    pm.expect([200, 202, 204]).to.include(pm.response.code);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "mcp-session-id",
						"value": "{{MCP_SESSION_ID}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"notifications/initialized\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/mcp/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"mcp",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "3. List Tools (First Page)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {",
							"    const response = pm.response.json();",
							"    const result = response.result;",
							"    console.log(\"Response Body:\", JSON.stringify(response, null, 2));",
							"",
							"    if (result && result.nextCursor) {",
							"        pm.collectionVariables.set(\"nextCursor\", result.nextCursor);",
							"        console.log(`Next cursor set to: ${result.nextCursor}`);",
							"    } else {",
							"        pm.collectionVariables.set(\"nextCursor\", \"\");",
							"        console.log(\"No nextCursor found. End of list.\");",
							"    }",
							"",
							"    pm.test(\"Response contains a list of tools\", function () {",
							"        pm.expect(result).to.have.property('tools');",
							"        pm.expect(result.tools).to.be.an('array');",
							"    });",
							"} catch (e) {",
							"    console.error(\"Failed to parse list_tools response JSON.\", e);",
							"    console.log(\"Raw Response:\", pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "mcp-session-id",
						"value": "{{MCP_SESSION_ID}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 2,\n    \"method\": \"tools/list\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/mcp/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"mcp",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "4. List Tools (Next Page)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {",
							"    const response = pm.response.json();",
							"    const result = response.result;",
							"    console.log(\"Response Body:\", JSON.stringify(response, null, 2));",
							"",
							"    if (result && result.nextCursor) {",
							"        pm.collectionVariables.set(\"nextCursor\", result.nextCursor);",
							"        console.log(`Next cursor set to: ${result.nextCursor}`);",
							"    } else {",
							"        pm.collectionVariables.set(\"nextCursor\", \"\");",
							"        console.log(\"No nextCursor found. End of list.\");",
							"    }",
							"",
							"    pm.test(\"Response contains a list of tools\", function () {",
							"        pm.expect(result).to.have.property('tools');",
							"        pm.expect(result.tools).to.be.an('array');",
							"    });",
							"} catch (e) {",
							"    console.error(\"Failed to parse list_tools response JSON.\", e);",
							"    console.log(\"Raw Response:\", pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					},
					{
						"key": "mcp-session-id",
						"value": "{{MCP_SESSION_ID}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"method\": \"tools/list\",\n    \"params\": {\n        \"cursor\": \"{{nextCursor}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/mcp/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"mcp",
						""
					]
				},
				"description": "Fetches the next page of tools. Run this request repeatedly to page through all the results."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "MCP_SESSION_ID",
			"value": ""
		},
		{
			"key": "nextCursor",
			"value": ""
		}
	]
} 