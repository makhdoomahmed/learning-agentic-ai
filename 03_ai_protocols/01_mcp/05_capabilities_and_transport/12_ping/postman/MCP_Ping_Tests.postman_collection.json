{
  "info": {
    "name": "MCP Ping Utility Tests",
    "description": "Comprehensive testing collection for MCP Ping Utility according to the official specification: https://modelcontextprotocol.io/specification/2025-03-26/basic/utilities/ping",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "‚úÖ Complete MCP Ping Lifecycle",
      "item": [
        {
          "name": "1. Initialize MCP Server",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test MCP initialization response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Type is text/event-stream\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});",
                  "",
                  "pm.test(\"Response contains MCP session ID\", function () {", 
                  "    pm.response.to.have.header('mcp-session-id');",
                  "});",
                  "",
                  "// Extract and save the session ID",
                  "const sessionId = pm.response.headers.get('mcp-session-id');",
                  "if (sessionId) {",
                  "    pm.collectionVariables.set('mcp_session_id', sessionId);",
                  "    console.log(`Saved MCP Session ID: ${sessionId}`);",
                  "}",
                  "",
                  "pm.test(\"Valid SSE format response\", function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('data: ');",
                  "});",
                  "",
                  "pm.test(\"Protocol version matches 2025-06-18\", function () {",
                  "    const responseText = pm.response.text();",
                  "    const dataLine = responseText.split('\\n').find(line => line.startsWith('data: '));",
                  "    if (dataLine) {",
                  "        const data = JSON.parse(dataLine.substring(6));",
                  "        if (data.result && data.result.protocolVersion) {",
                  "            pm.expect(data.result.protocolVersion).to.equal('2025-06-18');",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept", 
                "value": "application/json, text/event-stream"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2025-06-18\",\n        \"clientInfo\": {\n            \"name\": \"postman-ping-client\",\n            \"title\": \"Postman Ping Test Client\",\n            \"version\": \"1.0.0\"\n        },\n        \"capabilities\": {\n            \"sampling\": {},\n            \"elicitation\": {}\n        }\n    },\n    \"id\": 1\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000",
              "path": [
                "mcp",
                ""
              ]
            }
          }
        },
        {
          "name": "2. Send Initialized Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 202 (notification accepted)\", function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "console.log('‚úÖ MCP initialization complete - ready for ping tests');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json, text/event-stream"
              },
              {
                "key": "mcp-session-id",
                "value": "{{mcp_session_id}}"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"notifications/initialized\",\n    \"params\": {}\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000",
              "path": [
                "mcp",
                ""
              ]
            }
          }
        },
        {
          "name": "3. Basic Ping Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test ping response according to MCP specification",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable (< 1000ms)\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "    console.log('‚è±Ô∏è Response time:', pm.response.responseTime + 'ms');",
                  "});",
                  "",
                  "pm.test(\"Response format complies with MCP spec\", function () {",
                  "    const responseText = pm.response.text();",
                  "    ",
                  "    // Handle SSE format",
                  "    let jsonData;",
                  "    if (responseText.includes('data: ')) {",
                  "        const dataLine = responseText.split('\\n').find(line => line.startsWith('data: '));",
                  "        jsonData = JSON.parse(dataLine.substring(6));",
                  "    } else {",
                  "        jsonData = pm.response.json();",
                  "    }",
                  "    ",
                  "    // Validate response structure per MCP specification",
                  "    pm.expect(jsonData).to.have.property('jsonrpc', '2.0');",
                  "    pm.expect(jsonData).to.have.property('id', 'ping_test_1');",
                  "    pm.expect(jsonData).to.have.property('result');",
                  "    pm.expect(jsonData.result).to.be.an('object');",
                  "    pm.expect(Object.keys(jsonData.result)).to.have.lengthOf(0); // Empty object",
                  "    ",
                  "    console.log('‚úÖ Ping response format is MCP compliant');",
                  "    console.log('üìù Response:', JSON.stringify(jsonData));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json, text/event-stream"
              },
              {
                "key": "mcp-session-id",
                "value": "{{mcp_session_id}}"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"ping_test_1\",\n    \"method\": \"ping\"\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000",
              "path": [
                "mcp",
                ""
              ]
            }
          }
        },
        {
          "name": "4. Rapid Ping Test (Performance)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ping responds promptly (< 500ms)\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "    console.log('‚ö° Rapid ping response time:', pm.response.responseTime + 'ms');",
                  "});",
                  "",
                  "pm.test(\"Server handles rapid pings correctly\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    console.log('‚úÖ Server handles rapid pings as required by spec');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json, text/event-stream"
              },
              {
                "key": "mcp-session-id",
                "value": "{{mcp_session_id}}"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"rapid_ping_{{$timestamp}}\",\n    \"method\": \"ping\"\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000", 
              "path": [
                "mcp",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Ping Without MCP Session",
      "item": [
        {
          "name": "Ping Without MCP Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Server handles ping without session appropriately\", function () {",
                  "    // Server should either require session or handle gracefully",
                  "    const statusCode = pm.response.code;",
                  "    console.log('üìã Ping without session returned status:', statusCode);",
                  "    pm.expect(statusCode).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json, text/event-stream"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"no_session_ping\",\n    \"method\": \"ping\"\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000",
              "path": [
                "mcp",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üìö Specification Examples",
      "item": [
        {
          "name": "Exact Spec Example - Ping Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Spec example ping works perfectly\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    console.log('‚úÖ Official MCP specification example works!');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json, text/event-stream"
              },
              {
                "key": "mcp-session-id",
                "value": "{{mcp_session_id}}"
              },
              {
                "key": "MCP-Protocol-Version",
                "value": "2025-06-18"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}"
            },
            "url": {
              "raw": "http://localhost:8000/mcp/",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8000",
              "path": [
                "mcp",
                ""
              ]
            },
            "description": "This is the exact ping request format from the MCP specification:\nhttps://modelcontextprotocol.io/specification/2025-03-26/basic/utilities/ping"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "mcp_session_id", 
      "value": ""
    }
  ]
} 