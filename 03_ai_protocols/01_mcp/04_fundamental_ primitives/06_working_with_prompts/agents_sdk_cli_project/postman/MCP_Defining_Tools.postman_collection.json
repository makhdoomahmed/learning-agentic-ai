{
	"info": {
		"_postman_id": "mcp-defining-tools",
		"name": "MCP Defining Tools",
		"description": "Test collection for MCP tools implementation - document reader and editor tools",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Initialize Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2025-06-18\",\n    \"capabilities\": {},\n    \"clientInfo\": {\n      \"name\": \"postman-test\",\n      \"version\": \"1.0.0\"\n    }\n  },\n  \"id\": 1\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. List Available Tools",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains tools\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.have.property('tools');",
							"});",
							"",
							"pm.test(\"Tools array contains expected tools\", function () {",
							"    const jsonData = pm.response.json();",
							"    const tools = jsonData.result.tools;",
							"    const toolNames = tools.map(tool => tool.name);",
							"    pm.expect(toolNames).to.include('read_doc_contents');",
							"    pm.expect(toolNames).to.include('edit_document');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/list\",\n  \"params\": {},\n  \"id\": 2\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Read Document Contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});",
							"",
							"pm.test(\"Result contains content\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.have.property('content');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"read_doc_contents\",\n    \"arguments\": {\n      \"doc_id\": \"deposition.md\"\n    }\n  },\n  \"id\": 3\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Edit Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});",
							"",
							"pm.test(\"Result contains success message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result.content).to.include('Successfully updated');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"edit_document\",\n    \"arguments\": {\n      \"doc_id\": \"plan.md\",\n      \"old_str\": \"implementation\",\n      \"new_str\": \"execution\"\n    }\n  },\n  \"id\": 4\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Verify Document Edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Document was updated\", function () {",
							"    const jsonData = pm.response.json();",
							"    const content = jsonData.result.content;",
							"    pm.expect(content).to.include('execution');",
							"    pm.expect(content).to.not.include('implementation');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"read_doc_contents\",\n    \"arguments\": {\n      \"doc_id\": \"plan.md\"\n    }\n  },\n  \"id\": 5\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Test Error Handling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"pm.test(\"Error message indicates missing document\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error.message).to.include('not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"read_doc_contents\",\n    \"arguments\": {\n      \"doc_id\": \"nonexistent.md\"\n    }\n  },\n  \"id\": 6\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. List Documents Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});",
							"",
							"pm.test(\"Result contains document list\", function () {",
							"    const jsonData = pm.response.json();",
							"    const content = jsonData.result.content;",
							"    let docs = [];",
							"    try { docs = JSON.parse(content); } catch(e) {}",
							"    pm.expect(docs).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"docs://documents\"\n  },\n  \"id\": 7\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Get Document Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains document content\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.have.property('content');",
							"    pm.expect(jsonData.result.content).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json, text/event-stream"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"docs://test_doc\"\n  },\n  \"id\": 8\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [
						"{{server_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. Resources List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});",
							"",
							"pm.test(\"Result contains a list of resources\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{ "key": "Content-Type", "value": "application/json" },
					{ "key": "Accept", "value": "application/json, text/event-stream" }
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {},\n  \"id\": 10\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [ "{{server_url}}" ]
				}
			},
			"response": []
		},
		{
			"name": "11. Resources Templates List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains result\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('result');",
							"});",
							"",
							"pm.test(\"Result contains a list of resource templates\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.result).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{ "key": "Content-Type", "value": "application/json" },
					{ "key": "Accept", "value": "application/json, text/event-stream" }
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/templates/list\",\n  \"params\": {},\n  \"id\": 11\n}"
				},
				"url": {
					"raw": "{{server_url}}",
					"host": [ "{{server_url}}" ]
				}
			},
			"response": []
		},
		{
			"name": "01. Discover Available Prompts",
			"request": {
				"method": "POST",
				"header": [
					{ "key": "Content-Type", "value": "application/json" },
					{ "key": "Accept", "value": "application/json, text/event-stream" }
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/list\",\n    \"params\": {},\n    \"id\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [ "{{baseUrl}}" ],
					"path": [ "mcp" ]
				},
				"description": "Discover available prompt templates on the MCP server."
			}
		},
		{
			"name": "02. Get Format Prompt",
			"request": {
				"method": "POST",
				"header": [
					{ "key": "Content-Type", "value": "application/json" },
					{ "key": "Accept", "value": "application/json, text/event-stream" }
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"prompts/get\",\n    \"params\": {\n        \"name\": \"format\",\n        \"arguments\": {\n            \"doc_id\": \"plan.md\"\n        }\n    },\n    \"id\": 2\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/mcp",
					"host": [ "{{baseUrl}}" ],
					"path": [ "mcp" ]
				},
				"description": "Retrieve the 'format' prompt by providing a document id (e.g., plan.md) to get back a formatted markdown prompt."
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server_url",
			"value": "http://localhost:8000/mcp/",
			"type": "string"
		}
	]
} 